/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * YAPP26 WEB2
 * SSOK ÏÑúÎπÑÏä§ API Î™ÖÏÑ∏
 * OpenAPI spec version: v1
 */
import { faker } from "@faker-js/faker";

import { delay, HttpResponse, http } from "msw";

import type {
  StandardResponseAccommodationCountResponse,
  StandardResponseAccommodationPageResponse,
  StandardResponseString,
  StandardResponseUserResponse,
} from "./index.schemas";

export const getGetUserResponseMock = (
  overrideResponse: Partial<StandardResponseUserResponse> = {},
): StandardResponseUserResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSuccessResponseMock = (
  overrideResponse: Partial<StandardResponseString> = {},
): StandardResponseString => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getExceptionErrorResponseMock = (
  overrideResponse: Partial<StandardResponseString> = {},
): StandardResponseString => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCustomErrorResponseMock = (
  overrideResponse: Partial<StandardResponseString> = {},
): StandardResponseString => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getHealthCheckResponseMock = (): string => faker.word.sample();

export const getGetAccommodationByTableIdAndUserIdResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationPageResponse> = {},
): StandardResponseAccommodationPageResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      accommodations: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          userId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          urlTest: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          siteName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          memo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            new Date(faker.date.past().toISOString().split("T")[0]),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            new Date(faker.date.past().toISOString().split("T")[0]),
            undefined,
          ]),
          createdBy: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          tableId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          accommodationName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          images: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
          address: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          lowestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          highestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          currency: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          reviewScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          cleanlinessScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          reviewSummary: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          hotelId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          nearbyAttractions: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          nearbyTransportation: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          amenities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              available: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            })),
            undefined,
          ]),
          checkInTime: faker.helpers.arrayElement([
            {
              checkInTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkInTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          checkOutTime: faker.helpers.arrayElement([
            {
              checkInTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkInTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      hasNext: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAccommodationCountByTableIdResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationCountResponse> = {},
): StandardResponseAccommodationCountResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      accommodationCount: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getKakaoLoginRedirectMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/api/oauth/kakao", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetUserMockHandler = (
  overrideResponse?:
    | StandardResponseUserResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseUserResponse>
        | StandardResponseUserResponse),
) => {
  return http.get("*/api/mock/user/:id", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSuccessMockHandler = (
  overrideResponse?:
    | StandardResponseString
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StandardResponseString> | StandardResponseString),
) => {
  return http.get("*/api/mock/success", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSuccessResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getExceptionErrorMockHandler = (
  overrideResponse?:
    | StandardResponseString
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StandardResponseString> | StandardResponseString),
) => {
  return http.get("*/api/mock/exception-error", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getExceptionErrorResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCustomErrorMockHandler = (
  overrideResponse?:
    | StandardResponseString
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StandardResponseString> | StandardResponseString),
) => {
  return http.get("*/api/mock/custom-error", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCustomErrorResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getHealthCheckMockHandler = (
  overrideResponse?:
    | string
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<string> | string),
) => {
  return http.get("*/api/health", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getHealthCheckResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetAccommodationByTableIdAndUserIdMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationPageResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationPageResponse>
        | StandardResponseAccommodationPageResponse),
) => {
  return http.get("*/api/accommodations/search", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAccommodationByTableIdAndUserIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetAccommodationCountByTableIdMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationCountResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationCountResponse>
        | StandardResponseAccommodationCountResponse),
) => {
  return http.get("*/api/accommodations/count", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAccommodationCountByTableIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getYapp26Web2Mock = () => [
  getKakaoLoginRedirectMockHandler(),
  getGetUserMockHandler(),
  getSuccessMockHandler(),
  getExceptionErrorMockHandler(),
  getCustomErrorMockHandler(),
  getHealthCheckMockHandler(),
  getGetAccommodationByTableIdAndUserIdMockHandler(),
  getGetAccommodationCountByTableIdMockHandler(),
];

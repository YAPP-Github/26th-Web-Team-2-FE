/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * YAPP26 WEB2
 * SSOK ÏÑúÎπÑÏä§ API Î™ÖÏÑ∏
 * OpenAPI spec version: v1
 */
import { faker } from "@faker-js/faker";

import { delay, HttpResponse, http } from "msw";

import type {
  StandardResponseAccommodationCountResponse,
  StandardResponseAccommodationDeleteResponse,
  StandardResponseAccommodationPageResponse,
  StandardResponseAccommodationRegisterResponse,
  StandardResponseAccommodationResponse,
  StandardResponseAmenityFactorList,
  StandardResponseAuthorizeUrlResponse,
  StandardResponseBoolean,
  StandardResponseComparisonFactorList,
  StandardResponseComparisonTableDeleteResponse,
  StandardResponseComparisonTableResponse,
  StandardResponseCreateComparisonTableResponse,
  StandardResponseInvitationCodeResponse,
  StandardResponseInvitationToggleResponse,
  StandardResponseLogoutResponse,
  StandardResponseOauthLoginResponse,
  StandardResponseTokenSuccessResponse,
  StandardResponseTripBoardCreateResponse,
  StandardResponseTripBoardDeleteResponse,
  StandardResponseTripBoardJoinResponse,
  StandardResponseTripBoardLeaveResponse,
  StandardResponseTripBoardPageResponse,
  StandardResponseTripBoardSummaryResponse,
  StandardResponseTripBoardUpdateResponse,
  StandardResponseUserInfoResponse,
  StandardResponseWithdrawResponse,
} from "./index.schemas";

export const getGetTripBoardDetailResponseMock = (
  overrideResponse: Partial<StandardResponseTripBoardSummaryResponse> = {},
): StandardResponseTripBoardSummaryResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tripBoardId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      boardName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      destination: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      startDate: faker.helpers.arrayElement([
        new Date(faker.date.past().toISOString().split("T")[0]),
        undefined,
      ]),
      endDate: faker.helpers.arrayElement([
        new Date(faker.date.past().toISOString().split("T")[0]),
        undefined,
      ]),
      travelPeriod: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      userRole: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["OWNER", "MEMBER"] as const),
        undefined,
      ]),
      participantCount: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      accommodationCount: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      participants: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          userId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          profileImageUrl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          nickname: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          role: faker.helpers.arrayElement([
            faker.helpers.arrayElement(["OWNER", "MEMBER"] as const),
            undefined,
          ]),
        })),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateTripBoardResponseMock = (
  overrideResponse: Partial<StandardResponseTripBoardUpdateResponse> = {},
): StandardResponseTripBoardUpdateResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tripBoardId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      boardName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      destination: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      startDate: faker.helpers.arrayElement([
        new Date(faker.date.past().toISOString().split("T")[0]),
        undefined,
      ]),
      endDate: faker.helpers.arrayElement([
        new Date(faker.date.past().toISOString().split("T")[0]),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteTripBoardResponseMock = (
  overrideResponse: Partial<StandardResponseTripBoardDeleteResponse> = {},
): StandardResponseTripBoardDeleteResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tripBoardId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetComparisonTableResponseMock = (
  overrideResponse: Partial<StandardResponseComparisonTableResponse> = {},
): StandardResponseComparisonTableResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tableId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      tableName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accommodationResponsesList: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          siteName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoUrl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          memo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          createdBy: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          tripBoardId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          accommodationName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          images: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
          address: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          lowestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          highestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          currency: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          reviewScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          cleanlinessScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          reviewSummary: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          hotelId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          nearbyAttractions: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          nearbyTransportation: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          amenities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              available: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            })),
            undefined,
          ]),
          checkInTime: faker.helpers.arrayElement([
            {
              from: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              to: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          checkOutTime: faker.helpers.arrayElement([
            {
              from: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              to: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      factorsList: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          "REVIEW_SCORE",
          "ATTRACTION",
          "TRANSPORTATION",
          "CLEANLINESS",
          "AMENITY",
          "CHECK_TIME",
          "REVIEW_SUMMARY",
          "MEMO",
        ] as const),
        undefined,
      ]),
      createdBy: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateComparisonTableResponseMock = (
  overrideResponse: Partial<StandardResponseBoolean> = {},
): StandardResponseBoolean => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getDeleteComparisonTableResponseMock = (
  overrideResponse: Partial<StandardResponseComparisonTableDeleteResponse> = {},
): StandardResponseComparisonTableDeleteResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tableId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      message: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getAddAccommodationToComparisonTableResponseMock = (
  overrideResponse: Partial<StandardResponseComparisonTableResponse> = {},
): StandardResponseComparisonTableResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tableId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      tableName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accommodationResponsesList: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          siteName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoUrl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          memo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          createdBy: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          tripBoardId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          accommodationName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          images: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
          address: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          lowestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          highestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          currency: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          reviewScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          cleanlinessScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          reviewSummary: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          hotelId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          nearbyAttractions: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          nearbyTransportation: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          amenities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              available: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            })),
            undefined,
          ]),
          checkInTime: faker.helpers.arrayElement([
            {
              from: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              to: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          checkOutTime: faker.helpers.arrayElement([
            {
              from: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              to: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      factorsList: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          "REVIEW_SCORE",
          "ATTRACTION",
          "TRANSPORTATION",
          "CLEANLINESS",
          "AMENITY",
          "CHECK_TIME",
          "REVIEW_SUMMARY",
          "MEMO",
        ] as const),
        undefined,
      ]),
      createdBy: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateTripBoardResponseMock = (
  overrideResponse: Partial<StandardResponseTripBoardCreateResponse> = {},
): StandardResponseTripBoardCreateResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tripBoardId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      boardName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      destination: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      travelPeriod: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      startDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      endDate: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      invitationCode: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      invitationActive: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      creator: faker.helpers.arrayElement([
        {
          id: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          nickname: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          email: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          profileImage: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getLeaveTripBoardResponseMock = (
  overrideResponse: Partial<StandardResponseTripBoardLeaveResponse> = {},
): StandardResponseTripBoardLeaveResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tripBoardId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      leftAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getJoinTripBoardResponseMock = (
  overrideResponse: Partial<StandardResponseTripBoardJoinResponse> = {},
): StandardResponseTripBoardJoinResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tripBoardId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      boardName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      destination: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      travelPeriod: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      participantCount: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      joinedAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getWithdrawUserResponseMock = (
  overrideResponse: Partial<StandardResponseWithdrawResponse> = {},
): StandardResponseWithdrawResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      withdrawSuccess: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getRefreshTokensResponseMock = (
  overrideResponse: Partial<StandardResponseTokenSuccessResponse> = {},
): StandardResponseTokenSuccessResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      accessToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      refreshToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getLogoutResponseMock = (
  overrideResponse: Partial<StandardResponseLogoutResponse> = {},
): StandardResponseLogoutResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      logoutSuccess: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getExchangeKakaoTokenResponseMock = (
  overrideResponse: Partial<StandardResponseOauthLoginResponse> = {},
): StandardResponseOauthLoginResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      userId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      email: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      token: faker.helpers.arrayElement([
        {
          accessToken: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          refreshToken: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateComparisonTableResponseMock = (
  overrideResponse: Partial<StandardResponseCreateComparisonTableResponse> = {},
): StandardResponseCreateComparisonTableResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tableId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getRegisterAccommodationCardResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationRegisterResponse> = {},
): StandardResponseAccommodationRegisterResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      accommodationId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getToggleInvitationActiveResponseMock = (
  overrideResponse: Partial<StandardResponseInvitationToggleResponse> = {},
): StandardResponseInvitationToggleResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tripBoardId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      isActive: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      invitationCode: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetUserInfoResponseMock = (
  overrideResponse: Partial<StandardResponseUserInfoResponse> = {},
): StandardResponseUserInfoResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      profileImageUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      email: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetInvitationCodeResponseMock = (
  overrideResponse: Partial<StandardResponseInvitationCodeResponse> = {},
): StandardResponseInvitationCodeResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tripBoardId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      isActive: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      invitationCode: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTripBoardsResponseMock = (
  overrideResponse: Partial<StandardResponseTripBoardPageResponse> = {},
): StandardResponseTripBoardPageResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tripBoards: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          tripBoardId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          boardName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          destination: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          startDate: faker.helpers.arrayElement([
            new Date(faker.date.past().toISOString().split("T")[0]),
            undefined,
          ]),
          endDate: faker.helpers.arrayElement([
            new Date(faker.date.past().toISOString().split("T")[0]),
            undefined,
          ]),
          travelPeriod: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          userRole: faker.helpers.arrayElement([
            faker.helpers.arrayElement(["OWNER", "MEMBER"] as const),
            undefined,
          ]),
          participantCount: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          accommodationCount: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          participants: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              userId: faker.helpers.arrayElement([
                faker.number.int({
                  min: undefined,
                  max: undefined,
                  multipleOf: undefined,
                }),
                undefined,
              ]),
              profileImageUrl: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              nickname: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              role: faker.helpers.arrayElement([
                faker.helpers.arrayElement(["OWNER", "MEMBER"] as const),
                undefined,
              ]),
            })),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
        })),
        undefined,
      ]),
      hasNext: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetKakaoAuthorizeUrlResponseMock = (
  overrideResponse: Partial<StandardResponseAuthorizeUrlResponse> = {},
): StandardResponseAuthorizeUrlResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      authorizeUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetComparisonFactorListResponseMock = (
  overrideResponse: Partial<StandardResponseComparisonFactorList> = {},
): StandardResponseComparisonFactorList => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      factors: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          "REVIEW_SCORE",
          "ATTRACTION",
          "TRANSPORTATION",
          "CLEANLINESS",
          "AMENITY",
          "CHECK_TIME",
          "REVIEW_SUMMARY",
          "MEMO",
        ] as const),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAmenityFactorListResponseMock = (
  overrideResponse: Partial<StandardResponseAmenityFactorList> = {},
): StandardResponseAmenityFactorList => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      factors: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          "PARKING",
          "BREAKFAST",
          "FREE_WIFI",
          "POOL",
          "FITNESS",
          "LUGGAGE_STORAGE",
          "BAR_LOUNGE",
          "FRONT_DESK_HOURS",
          "PET_FRIENDLY",
          "BUSINESS_SERVICES",
          "CLEANING_SERVICE",
          "HANDICAP_FACILITIES",
        ] as const),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAccommodationByIdResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationResponse> = {},
): StandardResponseAccommodationResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      url: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      siteName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      logoUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      memo: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      createdBy: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      tripBoardId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      accommodationName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      images: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        undefined,
      ]),
      address: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      latitude: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      longitude: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      lowestPrice: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      highestPrice: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      currency: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      reviewScore: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      cleanlinessScore: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      reviewSummary: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      hotelId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      nearbyAttractions: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          type: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          distance: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          byFoot: faker.helpers.arrayElement([
            {
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              time: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          byCar: faker.helpers.arrayElement([
            {
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              time: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      nearbyTransportation: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          type: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          distance: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          byFoot: faker.helpers.arrayElement([
            {
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              time: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          byCar: faker.helpers.arrayElement([
            {
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              time: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      amenities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          type: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          available: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          description: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        })),
        undefined,
      ]),
      checkInTime: faker.helpers.arrayElement([
        {
          from: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          to: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
        undefined,
      ]),
      checkOutTime: faker.helpers.arrayElement([
        {
          from: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          to: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteAccommodationResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationDeleteResponse> = {},
): StandardResponseAccommodationDeleteResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      accommodationId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAccommodationByTripBoardIdAndUserIdResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationPageResponse> = {},
): StandardResponseAccommodationPageResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      accommodations: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          siteName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoUrl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          memo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          createdBy: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          tripBoardId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          accommodationName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          images: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
          address: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          lowestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          highestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          currency: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          reviewScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          cleanlinessScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          reviewSummary: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          hotelId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          nearbyAttractions: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          nearbyTransportation: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          amenities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              available: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            })),
            undefined,
          ]),
          checkInTime: faker.helpers.arrayElement([
            {
              from: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              to: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          checkOutTime: faker.helpers.arrayElement([
            {
              from: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              to: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      hasNext: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAccommodationCountByTripBoardIdResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationCountResponse> = {},
): StandardResponseAccommodationCountResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      accommodationCount: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTripBoardDetailMockHandler = (
  overrideResponse?:
    | StandardResponseTripBoardSummaryResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseTripBoardSummaryResponse>
        | StandardResponseTripBoardSummaryResponse),
) => {
  return http.get("*/api/trip-boards/:tripBoardId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTripBoardDetailResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateTripBoardMockHandler = (
  overrideResponse?:
    | StandardResponseTripBoardUpdateResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) =>
        | Promise<StandardResponseTripBoardUpdateResponse>
        | StandardResponseTripBoardUpdateResponse),
) => {
  return http.put("*/api/trip-boards/:tripBoardId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateTripBoardResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteTripBoardMockHandler = (
  overrideResponse?:
    | StandardResponseTripBoardDeleteResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<StandardResponseTripBoardDeleteResponse>
        | StandardResponseTripBoardDeleteResponse),
) => {
  return http.delete("*/api/trip-boards/:tripBoardId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteTripBoardResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetComparisonTableMockHandler = (
  overrideResponse?:
    | StandardResponseComparisonTableResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseComparisonTableResponse>
        | StandardResponseComparisonTableResponse),
) => {
  return http.get("*/api/comparison/:tableId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetComparisonTableResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateComparisonTableMockHandler = (
  overrideResponse?:
    | StandardResponseBoolean
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<StandardResponseBoolean> | StandardResponseBoolean),
) => {
  return http.put("*/api/comparison/:tableId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateComparisonTableResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteComparisonTableMockHandler = (
  overrideResponse?:
    | StandardResponseComparisonTableDeleteResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<StandardResponseComparisonTableDeleteResponse>
        | StandardResponseComparisonTableDeleteResponse),
) => {
  return http.delete("*/api/comparison/:tableId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteComparisonTableResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAddAccommodationToComparisonTableMockHandler = (
  overrideResponse?:
    | StandardResponseComparisonTableResponse
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) =>
        | Promise<StandardResponseComparisonTableResponse>
        | StandardResponseComparisonTableResponse),
) => {
  return http.patch("*/api/comparison/:tableId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAddAccommodationToComparisonTableResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreateTripBoardMockHandler = (
  overrideResponse?:
    | StandardResponseTripBoardCreateResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseTripBoardCreateResponse>
        | StandardResponseTripBoardCreateResponse),
) => {
  return http.post("*/api/trip-boards/register", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateTripBoardResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getLeaveTripBoardMockHandler = (
  overrideResponse?:
    | StandardResponseTripBoardLeaveResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseTripBoardLeaveResponse>
        | StandardResponseTripBoardLeaveResponse),
) => {
  return http.post("*/api/trip-boards/leave/:tripBoardId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getLeaveTripBoardResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getJoinTripBoardMockHandler = (
  overrideResponse?:
    | StandardResponseTripBoardJoinResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseTripBoardJoinResponse>
        | StandardResponseTripBoardJoinResponse),
) => {
  return http.post("*/api/trip-boards/join", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getJoinTripBoardResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getWithdrawUserMockHandler = (
  overrideResponse?:
    | StandardResponseWithdrawResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseWithdrawResponse>
        | StandardResponseWithdrawResponse),
) => {
  return http.post("*/api/oauth/withdraw", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getWithdrawUserResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getRefreshTokensMockHandler = (
  overrideResponse?:
    | StandardResponseTokenSuccessResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseTokenSuccessResponse>
        | StandardResponseTokenSuccessResponse),
) => {
  return http.post("*/api/oauth/refresh", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getRefreshTokensResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getLogoutMockHandler = (
  overrideResponse?:
    | StandardResponseLogoutResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseLogoutResponse>
        | StandardResponseLogoutResponse),
) => {
  return http.post("*/api/oauth/logout", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getLogoutResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getExchangeKakaoTokenMockHandler = (
  overrideResponse?:
    | StandardResponseOauthLoginResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseOauthLoginResponse>
        | StandardResponseOauthLoginResponse),
) => {
  return http.post("*/api/oauth/kakao/token", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getExchangeKakaoTokenResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreateComparisonTableMockHandler = (
  overrideResponse?:
    | StandardResponseCreateComparisonTableResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseCreateComparisonTableResponse>
        | StandardResponseCreateComparisonTableResponse),
) => {
  return http.post("*/api/comparison/new", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateComparisonTableResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getRegisterAccommodationCardMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationRegisterResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationRegisterResponse>
        | StandardResponseAccommodationRegisterResponse),
) => {
  return http.post("*/api/accommodations/register", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getRegisterAccommodationCardResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getToggleInvitationActiveMockHandler = (
  overrideResponse?:
    | StandardResponseInvitationToggleResponse
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) =>
        | Promise<StandardResponseInvitationToggleResponse>
        | StandardResponseInvitationToggleResponse),
) => {
  return http.patch(
    "*/api/trip-boards/:tripBoardId/invitation/toggle",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getToggleInvitationActiveResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getGetUserInfoMockHandler = (
  overrideResponse?:
    | StandardResponseUserInfoResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseUserInfoResponse>
        | StandardResponseUserInfoResponse),
) => {
  return http.get("*/api/users/me", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserInfoResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetInvitationCodeMockHandler = (
  overrideResponse?:
    | StandardResponseInvitationCodeResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseInvitationCodeResponse>
        | StandardResponseInvitationCodeResponse),
) => {
  return http.get("*/api/trip-boards/:tripBoardId/invitation", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetInvitationCodeResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetTripBoardsMockHandler = (
  overrideResponse?:
    | StandardResponseTripBoardPageResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseTripBoardPageResponse>
        | StandardResponseTripBoardPageResponse),
) => {
  return http.get("*/api/trip-boards/search", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTripBoardsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetKakaoAuthorizeUrlMockHandler = (
  overrideResponse?:
    | StandardResponseAuthorizeUrlResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseAuthorizeUrlResponse>
        | StandardResponseAuthorizeUrlResponse),
) => {
  return http.get("*/api/oauth/kakao/authorize", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetKakaoAuthorizeUrlResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetComparisonFactorListMockHandler = (
  overrideResponse?:
    | StandardResponseComparisonFactorList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseComparisonFactorList>
        | StandardResponseComparisonFactorList),
) => {
  return http.get("*/api/comparison/factors", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetComparisonFactorListResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetAmenityFactorListMockHandler = (
  overrideResponse?:
    | StandardResponseAmenityFactorList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseAmenityFactorList>
        | StandardResponseAmenityFactorList),
) => {
  return http.get("*/api/comparison/amenity", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAmenityFactorListResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetAccommodationByIdMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationResponse>
        | StandardResponseAccommodationResponse),
) => {
  return http.get("*/api/accommodations/:accommodationId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAccommodationByIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteAccommodationMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationDeleteResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationDeleteResponse>
        | StandardResponseAccommodationDeleteResponse),
) => {
  return http.delete("*/api/accommodations/:accommodationId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteAccommodationResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetAccommodationByTripBoardIdAndUserIdMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationPageResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationPageResponse>
        | StandardResponseAccommodationPageResponse),
) => {
  return http.get("*/api/accommodations/search", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAccommodationByTripBoardIdAndUserIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetAccommodationCountByTripBoardIdMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationCountResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationCountResponse>
        | StandardResponseAccommodationCountResponse),
) => {
  return http.get("*/api/accommodations/count", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAccommodationCountByTripBoardIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getYapp26Web2Mock = () => [
  getGetTripBoardDetailMockHandler(),
  getUpdateTripBoardMockHandler(),
  getDeleteTripBoardMockHandler(),
  getGetComparisonTableMockHandler(),
  getUpdateComparisonTableMockHandler(),
  getDeleteComparisonTableMockHandler(),
  getAddAccommodationToComparisonTableMockHandler(),
  getCreateTripBoardMockHandler(),
  getLeaveTripBoardMockHandler(),
  getJoinTripBoardMockHandler(),
  getWithdrawUserMockHandler(),
  getRefreshTokensMockHandler(),
  getLogoutMockHandler(),
  getExchangeKakaoTokenMockHandler(),
  getCreateComparisonTableMockHandler(),
  getRegisterAccommodationCardMockHandler(),
  getToggleInvitationActiveMockHandler(),
  getGetUserInfoMockHandler(),
  getGetInvitationCodeMockHandler(),
  getGetTripBoardsMockHandler(),
  getGetKakaoAuthorizeUrlMockHandler(),
  getGetComparisonFactorListMockHandler(),
  getGetAmenityFactorListMockHandler(),
  getGetAccommodationByIdMockHandler(),
  getDeleteAccommodationMockHandler(),
  getGetAccommodationByTripBoardIdAndUserIdMockHandler(),
  getGetAccommodationCountByTripBoardIdMockHandler(),
];

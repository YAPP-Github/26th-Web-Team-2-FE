/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * YAPP26 WEB2
 * SSOK ÏÑúÎπÑÏä§ API Î™ÖÏÑ∏
 * OpenAPI spec version: v1
 */
import { faker } from "@faker-js/faker";

import { delay, HttpResponse, http } from "msw";

import type {
  StandardResponseAccommodationCountResponse,
  StandardResponseAccommodationPageResponse,
  StandardResponseAccommodationRegisterResponse,
  StandardResponseAccommodationResponse,
  StandardResponseComparisonFactorList,
  StandardResponseComparisonTableResponse,
  StandardResponseCreateComparisonTableResponse,
} from "./index.schemas";

export const getGetComparisonTableResponseMock = (
  overrideResponse: Partial<StandardResponseComparisonTableResponse> = {},
): StandardResponseComparisonTableResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tableId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      tableName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accommodationResponsesList: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          siteName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoUrl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          memo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          createdBy: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          boardId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          accommodationName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          images: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
          address: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          lowestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          highestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          currency: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          reviewScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          cleanlinessScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          reviewSummary: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          hotelId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          nearbyAttractions: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          nearbyTransportation: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          amenities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              available: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            })),
            undefined,
          ]),
          checkInTime: faker.helpers.arrayElement([
            {
              checkInTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkInTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          checkOutTime: faker.helpers.arrayElement([
            {
              checkInTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkInTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      factorsList: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          "PARKING",
          "BREAKFAST",
          "FREE_WIFI",
          "POOL",
          "FITNESS",
          "LUGGAGE_STORAGE",
          "BAR_LOUNGE",
          "FRONT_DESK_HOURS",
          "PET_FRIENDLY",
          "BUSINESS_SERVICES",
          "CLEANING_SERVICE",
          "HANDICAP_FACILITIES",
        ] as const),
        undefined,
      ]),
      createdBy: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateComparisonTableResponseMock = (
  overrideResponse: Partial<StandardResponseComparisonTableResponse> = {},
): StandardResponseComparisonTableResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tableId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      tableName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accommodationResponsesList: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          siteName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoUrl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          memo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          createdBy: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          boardId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          accommodationName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          images: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
          address: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          lowestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          highestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          currency: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          reviewScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          cleanlinessScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          reviewSummary: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          hotelId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          nearbyAttractions: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          nearbyTransportation: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          amenities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              available: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            })),
            undefined,
          ]),
          checkInTime: faker.helpers.arrayElement([
            {
              checkInTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkInTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          checkOutTime: faker.helpers.arrayElement([
            {
              checkInTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkInTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      factorsList: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          "PARKING",
          "BREAKFAST",
          "FREE_WIFI",
          "POOL",
          "FITNESS",
          "LUGGAGE_STORAGE",
          "BAR_LOUNGE",
          "FRONT_DESK_HOURS",
          "PET_FRIENDLY",
          "BUSINESS_SERVICES",
          "CLEANING_SERVICE",
          "HANDICAP_FACILITIES",
        ] as const),
        undefined,
      ]),
      createdBy: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getAddAccommodationToComparisonTableResponseMock = (
  overrideResponse: Partial<StandardResponseComparisonTableResponse> = {},
): StandardResponseComparisonTableResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tableId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      tableName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accommodationResponsesList: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          siteName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoUrl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          memo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          createdBy: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          boardId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          accommodationName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          images: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
          address: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          lowestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          highestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          currency: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          reviewScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          cleanlinessScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          reviewSummary: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          hotelId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          nearbyAttractions: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          nearbyTransportation: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          amenities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              available: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            })),
            undefined,
          ]),
          checkInTime: faker.helpers.arrayElement([
            {
              checkInTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkInTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          checkOutTime: faker.helpers.arrayElement([
            {
              checkInTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkInTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      factorsList: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          "PARKING",
          "BREAKFAST",
          "FREE_WIFI",
          "POOL",
          "FITNESS",
          "LUGGAGE_STORAGE",
          "BAR_LOUNGE",
          "FRONT_DESK_HOURS",
          "PET_FRIENDLY",
          "BUSINESS_SERVICES",
          "CLEANING_SERVICE",
          "HANDICAP_FACILITIES",
        ] as const),
        undefined,
      ]),
      createdBy: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateComparisonTableResponseMock = (
  overrideResponse: Partial<StandardResponseCreateComparisonTableResponse> = {},
): StandardResponseCreateComparisonTableResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      tableId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getRegisterAccommodationCardResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationRegisterResponse> = {},
): StandardResponseAccommodationRegisterResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      accommodationId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetComparisonFactorListResponseMock = (
  overrideResponse: Partial<StandardResponseComparisonFactorList> = {},
): StandardResponseComparisonFactorList => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      factors: faker.helpers.arrayElement([
        faker.helpers.arrayElements([
          "PARKING",
          "BREAKFAST",
          "FREE_WIFI",
          "POOL",
          "FITNESS",
          "LUGGAGE_STORAGE",
          "BAR_LOUNGE",
          "FRONT_DESK_HOURS",
          "PET_FRIENDLY",
          "BUSINESS_SERVICES",
          "CLEANING_SERVICE",
          "HANDICAP_FACILITIES",
        ] as const),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAccommodationByIdResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationResponse> = {},
): StandardResponseAccommodationResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      url: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      siteName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      logoUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      memo: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      createdAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      updatedAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      createdBy: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      boardId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      accommodationName: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      images: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        undefined,
      ]),
      address: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      latitude: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      longitude: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      lowestPrice: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      highestPrice: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      currency: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      reviewScore: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      cleanlinessScore: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      reviewSummary: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      hotelId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      nearbyAttractions: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          type: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          distance: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          byFoot: faker.helpers.arrayElement([
            {
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              time: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          byCar: faker.helpers.arrayElement([
            {
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              time: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      nearbyTransportation: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          name: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          type: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          distance: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          byFoot: faker.helpers.arrayElement([
            {
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              time: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          byCar: faker.helpers.arrayElement([
            {
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              time: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      amenities: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          type: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          available: faker.helpers.arrayElement([
            faker.datatype.boolean(),
            undefined,
          ]),
          description: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        })),
        undefined,
      ]),
      checkInTime: faker.helpers.arrayElement([
        {
          checkInTimeFrom: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          checkInTimeTo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          checkOutTimeFrom: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          checkOutTimeTo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
        undefined,
      ]),
      checkOutTime: faker.helpers.arrayElement([
        {
          checkInTimeFrom: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          checkInTimeTo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          checkOutTimeFrom: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          checkOutTimeTo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAccommodationByBoardIdAndUserIdResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationPageResponse> = {},
): StandardResponseAccommodationPageResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      accommodations: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 4, max: 4 }) },
          (_, i) => i + 1,
        ).map(() => ({
          id: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          siteName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          logoUrl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          memo: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          createdAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          updatedAt: faker.helpers.arrayElement([
            new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
            undefined,
          ]),
          createdBy: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          boardId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          accommodationName: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          images: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            undefined,
          ]),
          address: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          latitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          longitude: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          lowestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          highestPrice: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          currency: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          reviewScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          cleanlinessScore: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
          reviewSummary: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          hotelId: faker.helpers.arrayElement([
            faker.number.int({
              min: undefined,
              max: undefined,
              multipleOf: undefined,
            }),
            undefined,
          ]),
          nearbyAttractions: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          nearbyTransportation: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              name: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              latitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              longitude: faker.helpers.arrayElement([
                faker.number.float({
                  min: undefined,
                  max: undefined,
                  fractionDigits: 2,
                }),
                undefined,
              ]),
              distance: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              byFoot: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
              byCar: faker.helpers.arrayElement([
                {
                  distance: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                  time: faker.helpers.arrayElement([
                    faker.string.alpha({ length: { min: 10, max: 20 } }),
                    undefined,
                  ]),
                },
                undefined,
              ]),
            })),
            undefined,
          ]),
          amenities: faker.helpers.arrayElement([
            Array.from(
              { length: faker.number.int({ min: 4, max: 4 }) },
              (_, i) => i + 1,
            ).map(() => ({
              type: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              available: faker.helpers.arrayElement([
                faker.datatype.boolean(),
                undefined,
              ]),
              description: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            })),
            undefined,
          ]),
          checkInTime: faker.helpers.arrayElement([
            {
              checkInTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkInTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
          checkOutTime: faker.helpers.arrayElement([
            {
              checkInTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkInTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeFrom: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
              checkOutTimeTo: faker.helpers.arrayElement([
                faker.string.alpha({ length: { min: 10, max: 20 } }),
                undefined,
              ]),
            },
            undefined,
          ]),
        })),
        undefined,
      ]),
      hasNext: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetAccommodationCountByBoardIdResponseMock = (
  overrideResponse: Partial<StandardResponseAccommodationCountResponse> = {},
): StandardResponseAccommodationCountResponse => ({
  responseType: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["SUCCESS", "ERROR"] as const),
    undefined,
  ]),
  result: faker.helpers.arrayElement([
    {
      accommodationCount: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetComparisonTableMockHandler = (
  overrideResponse?:
    | StandardResponseComparisonTableResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseComparisonTableResponse>
        | StandardResponseComparisonTableResponse),
) => {
  return http.get("*/api/comparison/:tableId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetComparisonTableResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateComparisonTableMockHandler = (
  overrideResponse?:
    | StandardResponseComparisonTableResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) =>
        | Promise<StandardResponseComparisonTableResponse>
        | StandardResponseComparisonTableResponse),
) => {
  return http.put("*/api/comparison/:tableId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateComparisonTableResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getAddAccommodationToComparisonTableMockHandler = (
  overrideResponse?:
    | StandardResponseComparisonTableResponse
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) =>
        | Promise<StandardResponseComparisonTableResponse>
        | StandardResponseComparisonTableResponse),
) => {
  return http.patch("*/api/comparison/:tableId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAddAccommodationToComparisonTableResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreateComparisonTableMockHandler = (
  overrideResponse?:
    | StandardResponseCreateComparisonTableResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseCreateComparisonTableResponse>
        | StandardResponseCreateComparisonTableResponse),
) => {
  return http.post("*/api/comparison/new", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateComparisonTableResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getRegisterAccommodationCardMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationRegisterResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationRegisterResponse>
        | StandardResponseAccommodationRegisterResponse),
) => {
  return http.post("*/api/accommodations/register", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getRegisterAccommodationCardResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getRedirectToKakaoAuthorizationMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/api/oauth/kakao", async (info) => {
    await delay(500);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetComparisonFactorListMockHandler = (
  overrideResponse?:
    | StandardResponseComparisonFactorList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseComparisonFactorList>
        | StandardResponseComparisonFactorList),
) => {
  return http.get("*/api/comparison/factors", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetComparisonFactorListResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetAccommodationByIdMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationResponse>
        | StandardResponseAccommodationResponse),
) => {
  return http.get("*/api/accommodations/:accommodationId", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAccommodationByIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetAccommodationByBoardIdAndUserIdMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationPageResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationPageResponse>
        | StandardResponseAccommodationPageResponse),
) => {
  return http.get("*/api/accommodations/search", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAccommodationByBoardIdAndUserIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetAccommodationCountByBoardIdMockHandler = (
  overrideResponse?:
    | StandardResponseAccommodationCountResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<StandardResponseAccommodationCountResponse>
        | StandardResponseAccommodationCountResponse),
) => {
  return http.get("*/api/accommodations/count", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAccommodationCountByBoardIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getYapp26Web2Mock = () => [
  getGetComparisonTableMockHandler(),
  getUpdateComparisonTableMockHandler(),
  getAddAccommodationToComparisonTableMockHandler(),
  getCreateComparisonTableMockHandler(),
  getRegisterAccommodationCardMockHandler(),
  getRedirectToKakaoAuthorizationMockHandler(),
  getGetComparisonFactorListMockHandler(),
  getGetAccommodationByIdMockHandler(),
  getGetAccommodationByBoardIdAndUserIdMockHandler(),
  getGetAccommodationCountByBoardIdMockHandler(),
];

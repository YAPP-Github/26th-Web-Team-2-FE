/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * YAPP26 WEB2
 * SSOK ÏÑúÎπÑÏä§ API Î™ÖÏÑ∏
 * OpenAPI spec version: v1
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import { http } from "./api/http";
import type {
  AccommodationRegisterRequest,
  AddAccommodationToComparisonTableParams,
  CreateComparisonTableRequest,
  GetAccommodationByBoardIdAndUserIdParams,
  GetAccommodationCountByBoardIdParams,
  StandardResponseAccommodationCountResponse,
  StandardResponseAccommodationPageResponse,
  StandardResponseAccommodationRegisterResponse,
  StandardResponseAccommodationResponse,
  StandardResponseComparisonFactorList,
  StandardResponseComparisonTableResponse,
  StandardResponseCreateComparisonTableResponse,
  StandardResponseString,
  StandardResponseUserResponse,
} from "./index.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * ÎπÑÍµêÌëú Î©îÌÉÄ Îç∞Ïù¥ÌÑ∞ÏôÄ Ìè¨Ìï®Îêú ÏàôÏÜå Ï†ïÎ≥¥ Î¶¨Ïä§Ìä∏Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÎπÑÍµêÌëú Ï°∞Ìöå
 */
export type getComparisonTableResponse200 = {
  data: StandardResponseComparisonTableResponse;
  status: 200;
};

export type getComparisonTableResponseComposite = getComparisonTableResponse200;

export type getComparisonTableResponse = getComparisonTableResponseComposite & {
  headers: Headers;
};

export const getGetComparisonTableUrl = (tableId: number) => {
  return `https://api.ssok.info/api/comparison/${tableId}`;
};

export const getComparisonTable = async (
  tableId: number,
  options?: RequestInit,
): Promise<getComparisonTableResponse> => {
  return http<getComparisonTableResponse>(getGetComparisonTableUrl(tableId), {
    ...options,
    method: "GET",
  });
};

export const getGetComparisonTableQueryKey = (tableId: number) => {
  return [`https://api.ssok.info/api/comparison/${tableId}`] as const;
};

export const getGetComparisonTableQueryOptions = <
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  tableId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetComparisonTableQueryKey(tableId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getComparisonTable>>
  > = ({ signal }) =>
    getComparisonTable(tableId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!tableId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getComparisonTable>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetComparisonTableQueryResult = NonNullable<
  Awaited<ReturnType<typeof getComparisonTable>>
>;
export type GetComparisonTableQueryError = unknown;

export function useGetComparisonTable<
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  tableId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComparisonTable>>,
          TError,
          Awaited<ReturnType<typeof getComparisonTable>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComparisonTable<
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  tableId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComparisonTable>>,
          TError,
          Awaited<ReturnType<typeof getComparisonTable>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComparisonTable<
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  tableId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎπÑÍµêÌëú Ï°∞Ìöå
 */

export function useGetComparisonTable<
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  tableId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetComparisonTableQueryOptions(tableId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÎπÑÍµêÌëú Ï°∞Ìöå
 */
export const prefetchGetComparisonTableQuery = async <
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  tableId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetComparisonTableQueryOptions(tableId, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetComparisonTableSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  tableId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetComparisonTableQueryKey(tableId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getComparisonTable>>
  > = ({ signal }) =>
    getComparisonTable(tableId, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getComparisonTable>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetComparisonTableSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getComparisonTable>>
>;
export type GetComparisonTableSuspenseQueryError = unknown;

export function useGetComparisonTableSuspense<
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  tableId: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComparisonTableSuspense<
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  tableId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComparisonTableSuspense<
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  tableId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎπÑÍµêÌëú Ï°∞Ìöå
 */

export function useGetComparisonTableSuspense<
  TData = Awaited<ReturnType<typeof getComparisonTable>>,
  TError = unknown,
>(
  tableId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getComparisonTable>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetComparisonTableSuspenseQueryOptions(
    tableId,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÎπÑÍµêÌëú Î©îÌÉÄ Îç∞Ïù¥ÌÑ∞ÏôÄ ÎπÑÍµê Í∏∞Ï§Ä Ìï≠Î™©ÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary ÎπÑÍµêÌëú ÏàòÏ†ï
 */
export type updateComparisonTableResponse200 = {
  data: StandardResponseComparisonTableResponse;
  status: 200;
};

export type updateComparisonTableResponseComposite =
  updateComparisonTableResponse200;

export type updateComparisonTableResponse =
  updateComparisonTableResponseComposite & {
    headers: Headers;
  };

export const getUpdateComparisonTableUrl = (tableId: number) => {
  return `https://api.ssok.info/api/comparison/${tableId}`;
};

export const updateComparisonTable = async (
  tableId: number,
  createComparisonTableRequest: CreateComparisonTableRequest,
  options?: RequestInit,
): Promise<updateComparisonTableResponse> => {
  return http<updateComparisonTableResponse>(
    getUpdateComparisonTableUrl(tableId),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createComparisonTableRequest),
    },
  );
};

export const getUpdateComparisonTableMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateComparisonTable>>,
    TError,
    { tableId: number; data: CreateComparisonTableRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateComparisonTable>>,
  TError,
  { tableId: number; data: CreateComparisonTableRequest },
  TContext
> => {
  const mutationKey = ["updateComparisonTable"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateComparisonTable>>,
    { tableId: number; data: CreateComparisonTableRequest }
  > = (props) => {
    const { tableId, data } = props ?? {};

    return updateComparisonTable(tableId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateComparisonTableMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateComparisonTable>>
>;
export type UpdateComparisonTableMutationBody = CreateComparisonTableRequest;
export type UpdateComparisonTableMutationError = unknown;

/**
 * @summary ÎπÑÍµêÌëú ÏàòÏ†ï
 */
export const useUpdateComparisonTable = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateComparisonTable>>,
      TError,
      { tableId: number; data: CreateComparisonTableRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateComparisonTable>>,
  TError,
  { tableId: number; data: CreateComparisonTableRequest },
  TContext
> => {
  const mutationOptions = getUpdateComparisonTableMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÎπÑÍµêÌëúÏóê ÏÉàÎ°úÏö¥ ÏàôÏÜåÎ•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
 * @summary ÎπÑÍµêÌëú ÏàôÏÜå Ï∂îÍ∞Ä
 */
export type addAccommodationToComparisonTableResponse200 = {
  data: StandardResponseComparisonTableResponse;
  status: 200;
};

export type addAccommodationToComparisonTableResponseComposite =
  addAccommodationToComparisonTableResponse200;

export type addAccommodationToComparisonTableResponse =
  addAccommodationToComparisonTableResponseComposite & {
    headers: Headers;
  };

export const getAddAccommodationToComparisonTableUrl = (
  tableId: number,
  params: AddAccommodationToComparisonTableParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.ssok.info/api/comparison/${tableId}?${stringifiedParams}`
    : `https://api.ssok.info/api/comparison/${tableId}`;
};

export const addAccommodationToComparisonTable = async (
  tableId: number,
  params: AddAccommodationToComparisonTableParams,
  options?: RequestInit,
): Promise<addAccommodationToComparisonTableResponse> => {
  return http<addAccommodationToComparisonTableResponse>(
    getAddAccommodationToComparisonTableUrl(tableId, params),
    {
      ...options,
      method: "PATCH",
    },
  );
};

export const getAddAccommodationToComparisonTableMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addAccommodationToComparisonTable>>,
    TError,
    { tableId: number; params: AddAccommodationToComparisonTableParams },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addAccommodationToComparisonTable>>,
  TError,
  { tableId: number; params: AddAccommodationToComparisonTableParams },
  TContext
> => {
  const mutationKey = ["addAccommodationToComparisonTable"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addAccommodationToComparisonTable>>,
    { tableId: number; params: AddAccommodationToComparisonTableParams }
  > = (props) => {
    const { tableId, params } = props ?? {};

    return addAccommodationToComparisonTable(tableId, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddAccommodationToComparisonTableMutationResult = NonNullable<
  Awaited<ReturnType<typeof addAccommodationToComparisonTable>>
>;

export type AddAccommodationToComparisonTableMutationError = unknown;

/**
 * @summary ÎπÑÍµêÌëú ÏàôÏÜå Ï∂îÍ∞Ä
 */
export const useAddAccommodationToComparisonTable = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addAccommodationToComparisonTable>>,
      TError,
      { tableId: number; params: AddAccommodationToComparisonTableParams },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addAccommodationToComparisonTable>>,
  TError,
  { tableId: number; params: AddAccommodationToComparisonTableParams },
  TContext
> => {
  const mutationOptions =
    getAddAccommodationToComparisonTableMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÎπÑÍµêÌëú Ïù¥Î¶Ñ, ÏàôÏÜå ID Î¶¨Ïä§Ìä∏, ÎπÑÍµê Í∏∞Ï§Ä Ìï≠Î™©ÏùÑ Î∞õÏïÑÏÑú ÎπÑÍµêÌëú Î©îÌÉÄ Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary ÎπÑÍµêÌëú ÏÉùÏÑ±
 */
export type createComparisonTableResponse200 = {
  data: StandardResponseCreateComparisonTableResponse;
  status: 200;
};

export type createComparisonTableResponseComposite =
  createComparisonTableResponse200;

export type createComparisonTableResponse =
  createComparisonTableResponseComposite & {
    headers: Headers;
  };

export const getCreateComparisonTableUrl = () => {
  return `https://api.ssok.info/api/comparison/new`;
};

export const createComparisonTable = async (
  createComparisonTableRequest: CreateComparisonTableRequest,
  options?: RequestInit,
): Promise<createComparisonTableResponse> => {
  return http<createComparisonTableResponse>(getCreateComparisonTableUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createComparisonTableRequest),
  });
};

export const getCreateComparisonTableMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createComparisonTable>>,
    TError,
    { data: CreateComparisonTableRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createComparisonTable>>,
  TError,
  { data: CreateComparisonTableRequest },
  TContext
> => {
  const mutationKey = ["createComparisonTable"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createComparisonTable>>,
    { data: CreateComparisonTableRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createComparisonTable(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateComparisonTableMutationResult = NonNullable<
  Awaited<ReturnType<typeof createComparisonTable>>
>;
export type CreateComparisonTableMutationBody = CreateComparisonTableRequest;
export type CreateComparisonTableMutationError = unknown;

/**
 * @summary ÎπÑÍµêÌëú ÏÉùÏÑ±
 */
export const useCreateComparisonTable = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createComparisonTable>>,
      TError,
      { data: CreateComparisonTableRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createComparisonTable>>,
  TError,
  { data: CreateComparisonTableRequest },
  TContext
> => {
  const mutationOptions = getCreateComparisonTableMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÎßÅÌÅ¨Î•º Ï≤®Î∂ÄÌïòÏó¨ ÏàôÏÜå Ïπ¥ÎìúÎ•º Îì±Î°ùÌï©ÎãàÎã§.
 * @summary ÏàôÏÜå Ïπ¥Îìú Îì±Î°ù
 */
export type registerAccommodationCardResponse200 = {
  data: StandardResponseAccommodationRegisterResponse;
  status: 200;
};

export type registerAccommodationCardResponseComposite =
  registerAccommodationCardResponse200;

export type registerAccommodationCardResponse =
  registerAccommodationCardResponseComposite & {
    headers: Headers;
  };

export const getRegisterAccommodationCardUrl = () => {
  return `https://api.ssok.info/api/accommodations/register`;
};

export const registerAccommodationCard = async (
  accommodationRegisterRequest: AccommodationRegisterRequest,
  options?: RequestInit,
): Promise<registerAccommodationCardResponse> => {
  return http<registerAccommodationCardResponse>(
    getRegisterAccommodationCardUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(accommodationRegisterRequest),
    },
  );
};

export const getRegisterAccommodationCardMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerAccommodationCard>>,
    TError,
    { data: AccommodationRegisterRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerAccommodationCard>>,
  TError,
  { data: AccommodationRegisterRequest },
  TContext
> => {
  const mutationKey = ["registerAccommodationCard"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerAccommodationCard>>,
    { data: AccommodationRegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return registerAccommodationCard(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterAccommodationCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerAccommodationCard>>
>;
export type RegisterAccommodationCardMutationBody =
  AccommodationRegisterRequest;
export type RegisterAccommodationCardMutationError = unknown;

/**
 * @summary ÏàôÏÜå Ïπ¥Îìú Îì±Î°ù
 */
export const useRegisterAccommodationCard = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof registerAccommodationCard>>,
      TError,
      { data: AccommodationRegisterRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof registerAccommodationCard>>,
  TError,
  { data: AccommodationRegisterRequest },
  TContext
> => {
  const mutationOptions = getRegisterAccommodationCardMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏöîÏ≤≠ Ïãú Ïπ¥Ïπ¥Ïò§ OAuth2 Ïù∏Í∞Ä ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏ÌïòÍ≥†, Ïù∏Í∞Ä ÏôÑÎ£å Ïãú Ïø†ÌÇ§Ïóê ACCESS TOKEN Î∞è REFRESH TOKENÏùÑ Î∞úÍ∏âÌï©ÎãàÎã§.
 * @summary Ïπ¥Ïπ¥Ïò§ ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Î¶¨Îã§Ïù¥Î†âÏÖò
 */
export type redirectToKakaoAuthorizationResponse302 = {
  data: undefined;
  status: 302;
};

export type redirectToKakaoAuthorizationResponseComposite =
  redirectToKakaoAuthorizationResponse302;

export type redirectToKakaoAuthorizationResponse =
  redirectToKakaoAuthorizationResponseComposite & {
    headers: Headers;
  };

export const getRedirectToKakaoAuthorizationUrl = () => {
  return `https://api.ssok.info/api/oauth/kakao`;
};

export const redirectToKakaoAuthorization = async (
  options?: RequestInit,
): Promise<redirectToKakaoAuthorizationResponse> => {
  return http<redirectToKakaoAuthorizationResponse>(
    getRedirectToKakaoAuthorizationUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getRedirectToKakaoAuthorizationQueryKey = () => {
  return [`https://api.ssok.info/api/oauth/kakao`] as const;
};

export const getRedirectToKakaoAuthorizationQueryOptions = <
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRedirectToKakaoAuthorizationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof redirectToKakaoAuthorization>>
  > = ({ signal }) =>
    redirectToKakaoAuthorization({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RedirectToKakaoAuthorizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof redirectToKakaoAuthorization>>
>;
export type RedirectToKakaoAuthorizationQueryError = undefined;

export function useRedirectToKakaoAuthorization<
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
          TError,
          Awaited<ReturnType<typeof redirectToKakaoAuthorization>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRedirectToKakaoAuthorization<
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
          TError,
          Awaited<ReturnType<typeof redirectToKakaoAuthorization>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRedirectToKakaoAuthorization<
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïπ¥Ïπ¥Ïò§ ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Î¶¨Îã§Ïù¥Î†âÏÖò
 */

export function useRedirectToKakaoAuthorization<
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRedirectToKakaoAuthorizationQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Ïπ¥Ïπ¥Ïò§ ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Î¶¨Îã§Ïù¥Î†âÏÖò
 */
export const prefetchRedirectToKakaoAuthorizationQuery = async <
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getRedirectToKakaoAuthorizationQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getRedirectToKakaoAuthorizationSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getRedirectToKakaoAuthorizationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof redirectToKakaoAuthorization>>
  > = ({ signal }) =>
    redirectToKakaoAuthorization({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RedirectToKakaoAuthorizationSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof redirectToKakaoAuthorization>>
>;
export type RedirectToKakaoAuthorizationSuspenseQueryError = undefined;

export function useRedirectToKakaoAuthorizationSuspense<
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRedirectToKakaoAuthorizationSuspense<
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRedirectToKakaoAuthorizationSuspense<
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïπ¥Ïπ¥Ïò§ ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Î¶¨Îã§Ïù¥Î†âÏÖò
 */

export function useRedirectToKakaoAuthorizationSuspense<
  TData = Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof redirectToKakaoAuthorization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getRedirectToKakaoAuthorizationSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type getUserResponse200 = {
  data: StandardResponseUserResponse;
  status: 200;
};

export type getUserResponseComposite = getUserResponse200;

export type getUserResponse = getUserResponseComposite & {
  headers: Headers;
};

export const getGetUserUrl = (id: number) => {
  return `https://api.ssok.info/api/mock/user/${id}`;
};

export const getUser = async (
  id: number,
  options?: RequestInit,
): Promise<getUserResponse> => {
  return http<getUserResponse>(getGetUserUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetUserQueryKey = (id: number) => {
  return [`https://api.ssok.info/api/mock/user/${id}`] as const;
};

export const getGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({
    signal,
  }) => getUser(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUser>>
>;
export type GetUserQueryError = unknown;

export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetUserQuery = async <
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetUserQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetUserSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({
    signal,
  }) => getUser(id, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUser>>
>;
export type GetUserSuspenseQueryError = unknown;

export function useGetUserSuspense<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserSuspense<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserSuspense<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUserSuspense<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type successResponse200 = {
  data: StandardResponseString;
  status: 200;
};

export type successResponseComposite = successResponse200;

export type successResponse = successResponseComposite & {
  headers: Headers;
};

export const getSuccessUrl = () => {
  return `https://api.ssok.info/api/mock/success`;
};

export const success = async (
  options?: RequestInit,
): Promise<successResponse> => {
  return http<successResponse>(getSuccessUrl(), {
    ...options,
    method: "GET",
  });
};

export const getSuccessQueryKey = () => {
  return [`https://api.ssok.info/api/mock/success`] as const;
};

export const getSuccessQueryOptions = <
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof success>>, TError, TData>
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSuccessQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof success>>> = ({
    signal,
  }) => success({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof success>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SuccessQueryResult = NonNullable<
  Awaited<ReturnType<typeof success>>
>;
export type SuccessQueryError = unknown;

export function useSuccess<
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof success>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof success>>,
          TError,
          Awaited<ReturnType<typeof success>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSuccess<
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof success>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof success>>,
          TError,
          Awaited<ReturnType<typeof success>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSuccess<
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof success>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSuccess<
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof success>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSuccessQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchSuccessQuery = async <
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof success>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getSuccessQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getSuccessSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof success>>, TError, TData>
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSuccessQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof success>>> = ({
    signal,
  }) => success({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof success>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SuccessSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof success>>
>;
export type SuccessSuspenseQueryError = unknown;

export function useSuccessSuspense<
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof success>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSuccessSuspense<
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof success>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSuccessSuspense<
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof success>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSuccessSuspense<
  TData = Awaited<ReturnType<typeof success>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof success>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSuccessSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type exceptionErrorResponse200 = {
  data: StandardResponseString;
  status: 200;
};

export type exceptionErrorResponseComposite = exceptionErrorResponse200;

export type exceptionErrorResponse = exceptionErrorResponseComposite & {
  headers: Headers;
};

export const getExceptionErrorUrl = () => {
  return `https://api.ssok.info/api/mock/exception-error`;
};

export const exceptionError = async (
  options?: RequestInit,
): Promise<exceptionErrorResponse> => {
  return http<exceptionErrorResponse>(getExceptionErrorUrl(), {
    ...options,
    method: "GET",
  });
};

export const getExceptionErrorQueryKey = () => {
  return [`https://api.ssok.info/api/mock/exception-error`] as const;
};

export const getExceptionErrorQueryOptions = <
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof exceptionError>>, TError, TData>
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getExceptionErrorQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof exceptionError>>> = ({
    signal,
  }) => exceptionError({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof exceptionError>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ExceptionErrorQueryResult = NonNullable<
  Awaited<ReturnType<typeof exceptionError>>
>;
export type ExceptionErrorQueryError = unknown;

export function useExceptionError<
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof exceptionError>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof exceptionError>>,
          TError,
          Awaited<ReturnType<typeof exceptionError>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExceptionError<
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof exceptionError>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof exceptionError>>,
          TError,
          Awaited<ReturnType<typeof exceptionError>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExceptionError<
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof exceptionError>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useExceptionError<
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof exceptionError>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getExceptionErrorQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchExceptionErrorQuery = async <
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof exceptionError>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getExceptionErrorQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getExceptionErrorSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof exceptionError>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getExceptionErrorQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof exceptionError>>> = ({
    signal,
  }) => exceptionError({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof exceptionError>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ExceptionErrorSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof exceptionError>>
>;
export type ExceptionErrorSuspenseQueryError = unknown;

export function useExceptionErrorSuspense<
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof exceptionError>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExceptionErrorSuspense<
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof exceptionError>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useExceptionErrorSuspense<
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof exceptionError>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useExceptionErrorSuspense<
  TData = Awaited<ReturnType<typeof exceptionError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof exceptionError>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getExceptionErrorSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type customErrorResponse200 = {
  data: StandardResponseString;
  status: 200;
};

export type customErrorResponseComposite = customErrorResponse200;

export type customErrorResponse = customErrorResponseComposite & {
  headers: Headers;
};

export const getCustomErrorUrl = () => {
  return `https://api.ssok.info/api/mock/custom-error`;
};

export const customError = async (
  options?: RequestInit,
): Promise<customErrorResponse> => {
  return http<customErrorResponse>(getCustomErrorUrl(), {
    ...options,
    method: "GET",
  });
};

export const getCustomErrorQueryKey = () => {
  return [`https://api.ssok.info/api/mock/custom-error`] as const;
};

export const getCustomErrorQueryOptions = <
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof customError>>, TError, TData>
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCustomErrorQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof customError>>> = ({
    signal,
  }) => customError({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof customError>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CustomErrorQueryResult = NonNullable<
  Awaited<ReturnType<typeof customError>>
>;
export type CustomErrorQueryError = unknown;

export function useCustomError<
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof customError>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof customError>>,
          TError,
          Awaited<ReturnType<typeof customError>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCustomError<
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof customError>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof customError>>,
          TError,
          Awaited<ReturnType<typeof customError>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCustomError<
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof customError>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useCustomError<
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof customError>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCustomErrorQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchCustomErrorQuery = async <
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof customError>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getCustomErrorQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getCustomErrorSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof customError>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getCustomErrorQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof customError>>> = ({
    signal,
  }) => customError({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof customError>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CustomErrorSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof customError>>
>;
export type CustomErrorSuspenseQueryError = unknown;

export function useCustomErrorSuspense<
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof customError>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCustomErrorSuspense<
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof customError>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCustomErrorSuspense<
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof customError>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useCustomErrorSuspense<
  TData = Awaited<ReturnType<typeof customError>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof customError>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCustomErrorSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ...
 * @summary Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
 */
export type healthCheckResponse200 = {
  data: string;
  status: 200;
};

export type healthCheckResponseComposite = healthCheckResponse200;

export type healthCheckResponse = healthCheckResponseComposite & {
  headers: Headers;
};

export const getHealthCheckUrl = () => {
  return `https://api.ssok.info/api/health`;
};

export const healthCheck = async (
  options?: RequestInit,
): Promise<healthCheckResponse> => {
  return http<healthCheckResponse>(getHealthCheckUrl(), {
    ...options,
    method: "GET",
  });
};

export const getHealthCheckQueryKey = () => {
  return [`https://api.ssok.info/api/health`] as const;
};

export const getHealthCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHealthCheckQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheck>>> = ({
    signal,
  }) => healthCheck({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof healthCheck>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HealthCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthCheck>>
>;
export type HealthCheckQueryError = unknown;

export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheck>>,
          TError,
          Awaited<ReturnType<typeof healthCheck>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheck>>,
          TError,
          Awaited<ReturnType<typeof healthCheck>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
 */

export function useHealthCheck<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHealthCheckQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
 */
export const prefetchHealthCheckQuery = async <
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof healthCheck>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getHealthCheckQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getHealthCheckSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof healthCheck>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHealthCheckQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheck>>> = ({
    signal,
  }) => healthCheck({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof healthCheck>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HealthCheckSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthCheck>>
>;
export type HealthCheckSuspenseQueryError = unknown;

export function useHealthCheckSuspense<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof healthCheck>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHealthCheckSuspense<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof healthCheck>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHealthCheckSuspense<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof healthCheck>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
 */

export function useHealthCheckSuspense<
  TData = Awaited<ReturnType<typeof healthCheck>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof healthCheck>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHealthCheckSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÎπÑÍµê Í∏∞Ï§Ä Ìï≠Î™© Enum Î¶¨Ïä§Ìä∏Î•º Î∞òÌôòÌï©ÎãàÎã§.
 * @summary ÎπÑÍµêÌëú Í∏∞Ï§Ä Ìï≠Î™© Enum Î¶¨Ïä§Ìä∏
 */
export type getComparisonFactorListResponse200 = {
  data: StandardResponseComparisonFactorList;
  status: 200;
};

export type getComparisonFactorListResponseComposite =
  getComparisonFactorListResponse200;

export type getComparisonFactorListResponse =
  getComparisonFactorListResponseComposite & {
    headers: Headers;
  };

export const getGetComparisonFactorListUrl = () => {
  return `https://api.ssok.info/api/comparison/factors`;
};

export const getComparisonFactorList = async (
  options?: RequestInit,
): Promise<getComparisonFactorListResponse> => {
  return http<getComparisonFactorListResponse>(
    getGetComparisonFactorListUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetComparisonFactorListQueryKey = () => {
  return [`https://api.ssok.info/api/comparison/factors`] as const;
};

export const getGetComparisonFactorListQueryOptions = <
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getComparisonFactorList>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetComparisonFactorListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getComparisonFactorList>>
  > = ({ signal }) => getComparisonFactorList({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getComparisonFactorList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetComparisonFactorListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getComparisonFactorList>>
>;
export type GetComparisonFactorListQueryError = unknown;

export function useGetComparisonFactorList<
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonFactorList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComparisonFactorList>>,
          TError,
          Awaited<ReturnType<typeof getComparisonFactorList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComparisonFactorList<
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonFactorList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getComparisonFactorList>>,
          TError,
          Awaited<ReturnType<typeof getComparisonFactorList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComparisonFactorList<
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonFactorList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎπÑÍµêÌëú Í∏∞Ï§Ä Ìï≠Î™© Enum Î¶¨Ïä§Ìä∏
 */

export function useGetComparisonFactorList<
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonFactorList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetComparisonFactorListQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÎπÑÍµêÌëú Í∏∞Ï§Ä Ìï≠Î™© Enum Î¶¨Ïä§Ìä∏
 */
export const prefetchGetComparisonFactorListQuery = async <
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getComparisonFactorList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetComparisonFactorListQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetComparisonFactorListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getComparisonFactorList>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetComparisonFactorListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getComparisonFactorList>>
  > = ({ signal }) => getComparisonFactorList({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getComparisonFactorList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetComparisonFactorListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getComparisonFactorList>>
>;
export type GetComparisonFactorListSuspenseQueryError = unknown;

export function useGetComparisonFactorListSuspense<
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getComparisonFactorList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComparisonFactorListSuspense<
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getComparisonFactorList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetComparisonFactorListSuspense<
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getComparisonFactorList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎπÑÍµêÌëú Í∏∞Ï§Ä Ìï≠Î™© Enum Î¶¨Ïä§Ìä∏
 */

export function useGetComparisonFactorListSuspense<
  TData = Awaited<ReturnType<typeof getComparisonFactorList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getComparisonFactorList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetComparisonFactorListSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌäπÏ†ï ÏàôÏÜå IDÎ°ú ÏàôÏÜå Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏàôÏÜå Îã®Í±¥ Ï°∞Ìöå
 */
export type getAccommodationByIdResponse200 = {
  data: StandardResponseAccommodationResponse;
  status: 200;
};

export type getAccommodationByIdResponseComposite =
  getAccommodationByIdResponse200;

export type getAccommodationByIdResponse =
  getAccommodationByIdResponseComposite & {
    headers: Headers;
  };

export const getGetAccommodationByIdUrl = (accommodationId: number) => {
  return `https://api.ssok.info/api/accommodations/${accommodationId}`;
};

export const getAccommodationById = async (
  accommodationId: number,
  options?: RequestInit,
): Promise<getAccommodationByIdResponse> => {
  return http<getAccommodationByIdResponse>(
    getGetAccommodationByIdUrl(accommodationId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetAccommodationByIdQueryKey = (accommodationId: number) => {
  return [
    `https://api.ssok.info/api/accommodations/${accommodationId}`,
  ] as const;
};

export const getGetAccommodationByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  accommodationId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAccommodationByIdQueryKey(accommodationId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccommodationById>>
  > = ({ signal }) =>
    getAccommodationById(accommodationId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!accommodationId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccommodationById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAccommodationByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccommodationById>>
>;
export type GetAccommodationByIdQueryError = unknown;

export function useGetAccommodationById<
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  accommodationId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccommodationById>>,
          TError,
          Awaited<ReturnType<typeof getAccommodationById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationById<
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  accommodationId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccommodationById>>,
          TError,
          Awaited<ReturnType<typeof getAccommodationById>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationById<
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  accommodationId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÏàôÏÜå Îã®Í±¥ Ï°∞Ìöå
 */

export function useGetAccommodationById<
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  accommodationId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAccommodationByIdQueryOptions(
    accommodationId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÏàôÏÜå Îã®Í±¥ Ï°∞Ìöå
 */
export const prefetchGetAccommodationByIdQuery = async <
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  accommodationId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetAccommodationByIdQueryOptions(
    accommodationId,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetAccommodationByIdSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  accommodationId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAccommodationByIdQueryKey(accommodationId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccommodationById>>
  > = ({ signal }) =>
    getAccommodationById(accommodationId, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getAccommodationById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAccommodationByIdSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccommodationById>>
>;
export type GetAccommodationByIdSuspenseQueryError = unknown;

export function useGetAccommodationByIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  accommodationId: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationByIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  accommodationId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationByIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  accommodationId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÏàôÏÜå Îã®Í±¥ Ï°∞Ìöå
 */

export function useGetAccommodationByIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationById>>,
  TError = unknown,
>(
  accommodationId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAccommodationByIdSuspenseQueryOptions(
    accommodationId,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏàôÏÜå Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏàôÏÜå Î™©Î°ù Ï°∞Ìöå
 */
export type getAccommodationByBoardIdAndUserIdResponse200 = {
  data: StandardResponseAccommodationPageResponse;
  status: 200;
};

export type getAccommodationByBoardIdAndUserIdResponseComposite =
  getAccommodationByBoardIdAndUserIdResponse200;

export type getAccommodationByBoardIdAndUserIdResponse =
  getAccommodationByBoardIdAndUserIdResponseComposite & {
    headers: Headers;
  };

export const getGetAccommodationByBoardIdAndUserIdUrl = (
  params: GetAccommodationByBoardIdAndUserIdParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.ssok.info/api/accommodations/search?${stringifiedParams}`
    : `https://api.ssok.info/api/accommodations/search`;
};

export const getAccommodationByBoardIdAndUserId = async (
  params: GetAccommodationByBoardIdAndUserIdParams,
  options?: RequestInit,
): Promise<getAccommodationByBoardIdAndUserIdResponse> => {
  return http<getAccommodationByBoardIdAndUserIdResponse>(
    getGetAccommodationByBoardIdAndUserIdUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetAccommodationByBoardIdAndUserIdQueryKey = (
  params: GetAccommodationByBoardIdAndUserIdParams,
) => {
  return [
    `https://api.ssok.info/api/accommodations/search`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetAccommodationByBoardIdAndUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  params: GetAccommodationByBoardIdAndUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAccommodationByBoardIdAndUserIdQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>
  > = ({ signal }) =>
    getAccommodationByBoardIdAndUserId(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAccommodationByBoardIdAndUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>
>;
export type GetAccommodationByBoardIdAndUserIdQueryError = unknown;

export function useGetAccommodationByBoardIdAndUserId<
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  params: GetAccommodationByBoardIdAndUserIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
          TError,
          Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationByBoardIdAndUserId<
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  params: GetAccommodationByBoardIdAndUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
          TError,
          Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationByBoardIdAndUserId<
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  params: GetAccommodationByBoardIdAndUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÏàôÏÜå Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAccommodationByBoardIdAndUserId<
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  params: GetAccommodationByBoardIdAndUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAccommodationByBoardIdAndUserIdQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÏàôÏÜå Î™©Î°ù Ï°∞Ìöå
 */
export const prefetchGetAccommodationByBoardIdAndUserIdQuery = async <
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params: GetAccommodationByBoardIdAndUserIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetAccommodationByBoardIdAndUserIdQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetAccommodationByBoardIdAndUserIdSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  params: GetAccommodationByBoardIdAndUserIdParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAccommodationByBoardIdAndUserIdQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>
  > = ({ signal }) =>
    getAccommodationByBoardIdAndUserId(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAccommodationByBoardIdAndUserIdSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>
>;
export type GetAccommodationByBoardIdAndUserIdSuspenseQueryError = unknown;

export function useGetAccommodationByBoardIdAndUserIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  params: GetAccommodationByBoardIdAndUserIdParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationByBoardIdAndUserIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  params: GetAccommodationByBoardIdAndUserIdParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationByBoardIdAndUserIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  params: GetAccommodationByBoardIdAndUserIdParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÏàôÏÜå Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAccommodationByBoardIdAndUserIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
  TError = unknown,
>(
  params: GetAccommodationByBoardIdAndUserIdParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationByBoardIdAndUserId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetAccommodationByBoardIdAndUserIdSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ïó¨ÌñâÎ≥¥ÎìúÏóê Ìè¨Ìï®Îêú ÏàôÏÜåÏùò Í∞úÏàòÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Ïó¨ÌñâÎ≥¥Îìú ÏàôÏÜå Í∞úÏàò Ï°∞Ìöå
 */
export type getAccommodationCountByBoardIdResponse200 = {
  data: StandardResponseAccommodationCountResponse;
  status: 200;
};

export type getAccommodationCountByBoardIdResponseComposite =
  getAccommodationCountByBoardIdResponse200;

export type getAccommodationCountByBoardIdResponse =
  getAccommodationCountByBoardIdResponseComposite & {
    headers: Headers;
  };

export const getGetAccommodationCountByBoardIdUrl = (
  params: GetAccommodationCountByBoardIdParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://api.ssok.info/api/accommodations/count?${stringifiedParams}`
    : `https://api.ssok.info/api/accommodations/count`;
};

export const getAccommodationCountByBoardId = async (
  params: GetAccommodationCountByBoardIdParams,
  options?: RequestInit,
): Promise<getAccommodationCountByBoardIdResponse> => {
  return http<getAccommodationCountByBoardIdResponse>(
    getGetAccommodationCountByBoardIdUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetAccommodationCountByBoardIdQueryKey = (
  params: GetAccommodationCountByBoardIdParams,
) => {
  return [
    `https://api.ssok.info/api/accommodations/count`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetAccommodationCountByBoardIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  params: GetAccommodationCountByBoardIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAccommodationCountByBoardIdQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccommodationCountByBoardId>>
  > = ({ signal }) =>
    getAccommodationCountByBoardId(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAccommodationCountByBoardIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccommodationCountByBoardId>>
>;
export type GetAccommodationCountByBoardIdQueryError = unknown;

export function useGetAccommodationCountByBoardId<
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  params: GetAccommodationCountByBoardIdParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
          TError,
          Awaited<ReturnType<typeof getAccommodationCountByBoardId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationCountByBoardId<
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  params: GetAccommodationCountByBoardIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
          TError,
          Awaited<ReturnType<typeof getAccommodationCountByBoardId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationCountByBoardId<
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  params: GetAccommodationCountByBoardIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïó¨ÌñâÎ≥¥Îìú ÏàôÏÜå Í∞úÏàò Ï°∞Ìöå
 */

export function useGetAccommodationCountByBoardId<
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  params: GetAccommodationCountByBoardIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAccommodationCountByBoardIdQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Ïó¨ÌñâÎ≥¥Îìú ÏàôÏÜå Í∞úÏàò Ï°∞Ìöå
 */
export const prefetchGetAccommodationCountByBoardIdQuery = async <
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params: GetAccommodationCountByBoardIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetAccommodationCountByBoardIdQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetAccommodationCountByBoardIdSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  params: GetAccommodationCountByBoardIdParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAccommodationCountByBoardIdQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccommodationCountByBoardId>>
  > = ({ signal }) =>
    getAccommodationCountByBoardId(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAccommodationCountByBoardIdSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccommodationCountByBoardId>>
>;
export type GetAccommodationCountByBoardIdSuspenseQueryError = unknown;

export function useGetAccommodationCountByBoardIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  params: GetAccommodationCountByBoardIdParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationCountByBoardIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  params: GetAccommodationCountByBoardIdParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAccommodationCountByBoardIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  params: GetAccommodationCountByBoardIdParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïó¨ÌñâÎ≥¥Îìú ÏàôÏÜå Í∞úÏàò Ï°∞Ìöå
 */

export function useGetAccommodationCountByBoardIdSuspense<
  TData = Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
  TError = unknown,
>(
  params: GetAccommodationCountByBoardIdParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAccommodationCountByBoardId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAccommodationCountByBoardIdSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
